package builds

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/internal"
	"github.com/yinweli/Sheeter/internal/fields"
	"github.com/yinweli/Sheeter/internal/layouts"
	"github.com/yinweli/Sheeter/internal/names"
	"github.com/yinweli/Sheeter/testdata"
)

func TestEntireJsonGo(t *testing.T) {
	suite.Run(t, new(SuiteEntireJsonGo))
}

type SuiteEntireJsonGo struct {
	suite.Suite
	workDir    string
	entire     *Entire
	codeStruct []byte
	codeReader []byte
}

func (this *SuiteEntireJsonGo) SetupSuite() {
	this.workDir = testdata.ChangeWorkDir()
	this.entire = &Entire{
		Type: &layouts.Type{
			Reader: true,
			Named: &names.Named{
				Excel: "test",
				Sheet: "data",
			},
			Field: []*layouts.Field{
				{Name: "name1", Note: "note1", Field: &fields.Pkey{}, Alter: "", Array: false},
				{Name: "name2", Note: "note2", Field: &fields.Int{}, Alter: "", Array: false},
				{Name: "name3", Note: "note3", Field: &fields.IntArray{}, Alter: "", Array: false},
				{Name: "name4", Note: "note4", Field: nil, Alter: "Data", Array: false},
				{Name: "name5", Note: "note5", Field: nil, Alter: "Data", Array: true},
			},
		},
	}
	this.codeStruct = []byte(`// generated by sheeter, DO NOT EDIT.

package sheeter

type TestData struct {
	// note1
	Name1 int64 ` + "`json:\"Name1\"`" + `
	// note2
	Name2 int64 ` + "`json:\"Name2\"`" + `
	// note3
	Name3 []int64 ` + "`json:\"Name3\"`" + `
	// note4
	Name4 Data ` + "`json:\"Name4\"`" + `
	// note5
	Name5 []Data ` + "`json:\"Name5\"`" + `
}
`)
	this.codeReader = []byte(fmt.Sprintf(`// generated by sheeter, DO NOT EDIT.

package sheeter

import (
	"encoding/json"
	"fmt"
	"os"
	"strconv"
)

type TestDataReader struct {
	Datas map[int64]TestData
}

func (this *TestDataReader) Json() string {
	return "%s"
}

func (this *TestDataReader) FromJsonFile(path string) error {
	data, err := os.ReadFile(path)

	if err != nil {
		return fmt.Errorf("TestDataReader: from json file failed: %%w", err)
	}

	return this.FromJsonBytes(data)
}

func (this *TestDataReader) FromJsonBytes(data []byte) error {
	temps := map[string]TestData{}

	if err := json.Unmarshal(data, &temps); err != nil {
		return err
	}

	datas := map[int64]TestData{}

	for key, value := range temps {
		k, err := strconv.ParseInt(key, 10, 64)

		if err != nil {
			return fmt.Errorf("TestDataReader: from json bytes failed: %%w", err)
		}

		datas[k] = value
	}

	this.Datas = datas
	return nil
}
`, filepath.ToSlash(filepath.Join(internal.PathJson, "testData.json"))))
}

func (this *SuiteEntireJsonGo) TearDownSuite() {
	_ = os.RemoveAll(internal.PathJsonGo)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteEntireJsonGo) TestEntireJsonGoStruct() {
	assert.Nil(this.T(), EntireJsonGoStruct(this.entire))
	testdata.CompareFile(this.T(), this.entire.Named.FileJsonGoStruct(), this.codeStruct)
}

func (this *SuiteEntireJsonGo) TestEntireJsonGoReader() {
	assert.Nil(this.T(), EntireJsonGoReader(this.entire))
	testdata.CompareFile(this.T(), this.entire.Named.FileJsonGoReader(), this.codeReader)
}
