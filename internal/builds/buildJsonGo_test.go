package builds

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/testdata"
)

func TestBuildJsonGo(t *testing.T) {
	suite.Run(t, new(SuiteBuildJsonGo))
}

type SuiteBuildJsonGo struct {
	suite.Suite
	workDir string
	code    []byte
	reader  []byte
}

func (this *SuiteBuildJsonGo) SetupSuite() {
	code := `package realdata

type RealData struct {
	S     S     ` + "`json:\"S\"`" + `
	Name0 int64 ` + "`json:\"name0\"`" + `
}

type S struct {
	A     []A  ` + "`json:\"A\"`" + `
	Name1 bool ` + "`json:\"name1\"`" + `
}

type A struct {
	Name2 int64  ` + "`json:\"name2\"`" + `
	Name3 string ` + "`json:\"name3\"`" + `
}
`
	reader := fmt.Sprintf(`// generated by sheeter, DO NOT EDIT.

package realdata

import "encoding/json"

type RealDataReader map[string]RealData

func (this *RealDataReader) JsonPath() string {
	return "%s"
}

func (this *RealDataReader) FromJson(data []byte) error {
	return json.Unmarshal(data, this)
}
`, filepath.Join("json", "realData.json"))

	this.workDir = testdata.ChangeWorkDir()
	this.code = []byte(code)
	this.reader = []byte(reader)
}

func (this *SuiteBuildJsonGo) TearDownSuite() {
	_ = os.RemoveAll(pathSchema)
	_ = os.RemoveAll(pathJsonGo)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteBuildJsonGo) target() *Content {
	target := &Content{
		LineOfField: 1,
		LineOfLayer: 2,
		LineOfNote:  3,
		Excel:       testdata.Path(testdata.ExcelNameReal),
		Sheet:       testdata.SheetName,
	}
	return target
}

func (this *SuiteBuildJsonGo) TestWriteJsonGo() {
	target := this.target()
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	assert.Nil(this.T(), writeJsonGo(target))
	testdata.CompareFile(this.T(), target.JsonGoPath(), this.code)
	target.close()

	target = this.target()
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	target.Excel = testdata.UnknownStr
	assert.NotNil(this.T(), writeJsonGo(target))
	target.close()

	target = this.target()
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	target.Sheet = testdata.UnknownStr
	assert.NotNil(this.T(), writeJsonGo(target))
	target.close()
}

func (this *SuiteBuildJsonGo) TestWriteJsonGoReader() {
	target := this.target()
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	assert.Nil(this.T(), writeJsonGoReader(target))
	testdata.CompareFile(this.T(), target.JsonGoReaderPath(), this.reader)
	target.close()

	// 由於linux下檔案名稱幾乎沒有非法字元, 所以這項檢查只針對windows
	if testdata.IsWindows() {
		target = this.target()
		target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
		assert.Nil(this.T(), buildLayout(target))
		assert.Nil(this.T(), writeSchema(target))
		target.Excel = testdata.UnknownStr
		assert.NotNil(this.T(), writeJsonGoReader(target))
		target.close()
	} // if

	// 由於linux下檔案名稱幾乎沒有非法字元, 所以這項檢查只針對windows
	if testdata.IsWindows() {
		target = this.target()
		target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
		assert.Nil(this.T(), buildLayout(target))
		assert.Nil(this.T(), writeSchema(target))
		target.Sheet = testdata.UnknownStr
		assert.NotNil(this.T(), writeJsonGoReader(target))
		target.close()
	} // if
}
