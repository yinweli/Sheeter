package builds

import (
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/testdata"
)

func TestBuildJsonGo(t *testing.T) {
	suite.Run(t, new(SuiteBuildJsonGo))
}

type SuiteBuildJsonGo struct {
	suite.Suite
	workDir string
	code    []byte
	reader  []byte
}

func (this *SuiteBuildJsonGo) SetupSuite() {
	this.workDir = testdata.ChangeWorkDir()
	this.code = []byte(`
`) // TODO: 代碼內容等測試時來看看
	this.reader = []byte(`// generated by sheeter, DO NOT EDIT.

package sheeter

import "encoding/json"

type RealDataReader map[string]RealData

func (this *RealDataReader) JsonFileName() string {
	return "realData.json"
}

func (this *RealDataReader) FromJson(data []byte) error {
    return json.Unmarshal(data, this)
}
`)
}

func (this *SuiteBuildJsonGo) TearDownSuite() {
	_ = os.RemoveAll(pathSchema)
	_ = os.RemoveAll(pathJsonGo)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteBuildJsonGo) target() *Content {
	target := &Content{
		Path:        testdata.RootPath,
		LineOfField: 1,
		LineOfLayer: 2,
		LineOfNote:  3,
		Excel:       testdata.ExcelNameReal,
		Sheet:       testdata.SheetName,
	}
	return target
}

func (this *SuiteBuildJsonGo) TestWriteJsonGo() {
	target := this.target()
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	assert.Nil(this.T(), writeJsonGo(target))
	testdata.CompareFile(this.T(), target.JsonGoFilePath(), this.code)
	target.close()

	target = this.target()
	target.Excel = testdata.UnknownStr
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	assert.NotNil(this.T(), writeJsonGo(target))
	target.close()

	target = this.target()
	target.Sheet = testdata.UnknownStr
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	assert.NotNil(this.T(), writeJsonGo(target))
	target.close()
}

func (this *SuiteBuildJsonGo) TestWriteJsonGoReader() {
	target := this.target()
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	assert.Nil(this.T(), writeJsonGoReader(target))
	testdata.CompareFile(this.T(), target.JsonGoReaderFilePath(), this.reader)
	target.close()

	target = this.target()
	target.Excel = testdata.UnknownStr
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	assert.NotNil(this.T(), writeJsonGoReader(target))
	target.close()

	target = this.target()
	target.Sheet = testdata.UnknownStr
	target.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(target))
	assert.Nil(this.T(), writeSchema(target))
	assert.NotNil(this.T(), writeJsonGoReader(target))
	target.close()
}
