package builds

import (
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/internal"
	"github.com/yinweli/Sheeter/internal/mixeds"
	"github.com/yinweli/Sheeter/testdata"
)

func TestPoststepJson(t *testing.T) {
	suite.Run(t, new(SuitePoststepJson))
}

type SuitePoststepJson struct {
	suite.Suite
	workDir string
}

func (this *SuitePoststepJson) SetupSuite() {
	this.workDir = testdata.ChangeWorkDir()
}

func (this *SuitePoststepJson) TearDownSuite() {
	_ = os.RemoveAll(internal.JsonPath)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuitePoststepJson) target() *Runtime {
	target := &Runtime{
		Struct: []*RuntimeStruct{
			{Mixed: mixeds.NewMixed("test", "data")},
		},
	}
	return target
}

func (this *SuitePoststepJson) TestPoststepJsonCsDepot() {
	data := []byte(`// Code generated by sheeter. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

using System.Collections.Generic;

namespace SheeterJson {
    public partial class Depot {
        public readonly TestDataReader TestData = new TestDataReader();
        private readonly List<ReaderInterface> Readers = new List<ReaderInterface>();
        
        public Depot() {
            Readers.Add(TestData);
        }

        public bool FromData(DelegateLoad load, DelegateError error) {
            var result = true;

            foreach (var itor in Readers) {
                var data = load(itor.DataName(), itor.DataExt());

                if (data == null || data.Length == 0)
                    continue;

                var message = itor.FromData(data);

                if (message.Length != 0) {
                    result = false;
                    error(itor.DataName(), message);
                }
            }

            return result;
        }

        public bool MergeData(DelegateLoad load, DelegateError error) {
            var result = true;

            foreach (var itor in Readers) {
                var data = load(itor.DataName(), itor.DataExt());

                if (data == null || data.Length == 0)
                    continue;

                var message = itor.MergeData(data);

                if (message.Length != 0) {
                    result = false;
                    error(itor.DataName(), message);
                }
            }

            return result;
        }

        public delegate void DelegateError(string name, string message);
        public delegate string DelegateLoad(string name, string ext);
    }

    public interface ReaderInterface {
        public string DataName();
        public string DataExt();
        public string DataFile();
        public string FromData(string data);
        public string MergeData(string data);
    }
}
`)

	target := this.target()
	assert.Nil(this.T(), poststepJsonCsDepot(target))
	testdata.CompareFile(this.T(), target.JsonCsDepotPath(), data)
}
