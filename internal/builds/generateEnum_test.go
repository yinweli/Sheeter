package builds

import (
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/internal"
	"github.com/yinweli/Sheeter/internal/layouts"
	"github.com/yinweli/Sheeter/internal/nameds"
	"github.com/yinweli/Sheeter/testdata"
)

func TestGenerateEnum(t *testing.T) {
	suite.Run(t, new(SuiteGenerateEnum))
}

type SuiteGenerateEnum struct {
	suite.Suite
	workDir string
}

func (this *SuiteGenerateEnum) SetupSuite() {
	this.workDir = testdata.ChangeWorkDir()
}

func (this *SuiteGenerateEnum) TearDownSuite() {
	_ = os.RemoveAll(internal.EnumPath)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteGenerateEnum) target() *generateEnum {
	const excelName = "test"
	const sheetName = "data"

	target := &generateEnum{
		Global: &Global{},
		Named:  &nameds.Named{ExcelName: excelName, SheetName: sheetName},
		Enum:   &nameds.Enum{ExcelName: excelName, SheetName: sheetName},
		Enums: []*layouts.Enum{
			{Name: "name1", Index: 1, Comment: "comment1"},
			{Name: "name2", Index: 2, Comment: "comment2"},
			{Name: "name3", Index: 3, Comment: "comment3"},
		},
	}
	return target
}

func (this *SuiteGenerateEnum) TestGenerateEnumSchema() {
	data := []byte(`// Code generated by sheeter. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

syntax = "proto3";
package sheeterEnum;
option go_package = ".;sheeterEnum";

enum TestData {
  Name1 = 1; // comment1
  Name2 = 2; // comment2
  Name3 = 3; // comment3
}
`)

	target := this.target()
	assert.Nil(this.T(), GenerateEnumSchema(target, nil))
	testdata.CompareFile(this.T(), target.EnumPath(), data)

	assert.Nil(this.T(), GenerateEnumSchema(nil, nil))
}
