package builds

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/internal"
	"github.com/yinweli/Sheeter/internal/mixeds"
	"github.com/yinweli/Sheeter/testdata"
)

func TestPoststepProto(t *testing.T) {
	suite.Run(t, new(SuitePoststepProto))
}

type SuitePoststepProto struct {
	suite.Suite
	workDir string
}

func (this *SuitePoststepProto) SetupSuite() {
	this.workDir = testdata.ChangeWorkDir()
}

func (this *SuitePoststepProto) TearDownSuite() {
	_ = os.Remove(internal.ProtoCsBatFile)
	_ = os.Remove(internal.ProtoCsShFile)
	_ = os.Remove(internal.ProtoGoBatFile)
	_ = os.Remove(internal.ProtoGoShFile)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuitePoststepProto) target() *Runtime {
	target := &Runtime{
		Struct: []*RuntimeStruct{
			{Mixed: mixeds.NewMixed("test", "data")},
		},
	}
	return target
}

func (this *SuitePoststepProto) TestPoststepProtoCsBat() {
	proto := filepath.Join(internal.ProtoPath, internal.SchemaPath)
	code := filepath.Join(internal.ProtoPath, internal.CsPath)
	file := filepath.Join(internal.ProtoPath, internal.SchemaPath, "testData.proto")
	data := []byte(fmt.Sprintf(`REM Code generated by sheeter. DO NOT EDIT.
REM Sheeter: https://github.com/yinweli/Sheeter

mkdir %s
protoc --experimental_allow_proto3_optional --proto_path=./%s --csharp_out=./%s ./%s
`, code, proto, code, file))

	target := this.target()
	assert.Nil(this.T(), poststepProtoCsBat(target))
	testdata.CompareFile(this.T(), internal.ProtoCsBatFile, data)
}

func (this *SuitePoststepProto) TestPoststepProtoCsSh() {
	proto := filepath.Join(internal.ProtoPath, internal.SchemaPath)
	code := filepath.Join(internal.ProtoPath, internal.CsPath)
	file := filepath.Join(internal.ProtoPath, internal.SchemaPath, "testData.proto")
	data := []byte(fmt.Sprintf(`# Code generated by sheeter. DO NOT EDIT.
# Sheeter: https://github.com/yinweli/Sheeter

mkdir %s
protoc --experimental_allow_proto3_optional --proto_path=./%s --csharp_out=./%s ./%s
`, code, proto, code, file))

	target := this.target()
	assert.Nil(this.T(), poststepProtoCsSh(target))
	testdata.CompareFile(this.T(), internal.ProtoCsShFile, data)
}

func (this *SuitePoststepProto) TestPoststepProtoGoBat() {
	proto := filepath.Join(internal.ProtoPath, internal.SchemaPath)
	code := filepath.Join(internal.ProtoPath, internal.GoPath)
	file := filepath.Join(internal.ProtoPath, internal.SchemaPath, "testData.proto")
	data := []byte(fmt.Sprintf(`REM Code generated by sheeter. DO NOT EDIT.
REM Sheeter: https://github.com/yinweli/Sheeter

mkdir %s
protoc --experimental_allow_proto3_optional --proto_path=./%s --go_out=./%s ./%s
`, code, proto, code, file))

	target := this.target()
	assert.Nil(this.T(), poststepProtoGoBat(target))
	testdata.CompareFile(this.T(), internal.ProtoGoBatFile, data)
}

func (this *SuitePoststepProto) TestPoststepProtoGoSh() {
	proto := filepath.Join(internal.ProtoPath, internal.SchemaPath)
	code := filepath.Join(internal.ProtoPath, internal.GoPath)
	file := filepath.Join(internal.ProtoPath, internal.SchemaPath, "testData.proto")
	data := []byte(fmt.Sprintf(`# Code generated by sheeter. DO NOT EDIT.
# Sheeter: https://github.com/yinweli/Sheeter

mkdir %s
protoc --experimental_allow_proto3_optional --proto_path=./%s --go_out=./%s ./%s
`, code, proto, code, file))

	target := this.target()
	assert.Nil(this.T(), poststepProtoGoSh(target))
	testdata.CompareFile(this.T(), internal.ProtoGoShFile, data)
}
