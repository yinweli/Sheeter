package builds

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/testdata"
)

func TestJsonCs(t *testing.T) {
	suite.Run(t, new(SuiteJsonCs))
}

type SuiteJsonCs struct {
	suite.Suite
	workDir string
	bom     bool
	code    []byte
	reader  []byte
}

func (this *SuiteJsonCs) SetupSuite() {
	code := `namespace sheeter
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RealData
    {
        [JsonProperty("S")]
        public S S { get; set; }

        [JsonProperty("name0")]
        public long Name0 { get; set; }
    }

    public partial class S
    {
        [JsonProperty("A")]
        public A[] A { get; set; }

        [JsonProperty("name1")]
        public bool Name1 { get; set; }
    }

    public partial class A
    {
        [JsonProperty("name2")]
        public long Name2 { get; set; }

        [JsonProperty("name3")]
        public string Name3 { get; set; }
    }
}
`
	reader := fmt.Sprintf(`// generated by sheeter, DO NOT EDIT.

using System;
using System.IO;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace sheeter {
    public partial class RealDataReader {
        public static readonly string Json = "%s";

        public static Dictionary<string, RealData> FromJsonFile(string path) {
            return FromJson(File.ReadAllText(path));
        }

        public static Dictionary<string, RealData> FromJsonString(string data) {
            return JsonConvert.DeserializeObject<Dictionary<string, RealData>>(data);
        }
    }

}
`, filepath.Join("json", "realData.json"))

	this.workDir = testdata.ChangeWorkDir()
	this.bom = false
	this.code = []byte(code)
	this.reader = []byte(reader)
}

func (this *SuiteJsonCs) TearDownSuite() {
	_ = os.RemoveAll(pathJsonSchema)
	_ = os.RemoveAll(pathJsonCs)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteJsonCs) target() *Contents {
	target := &Contents{
		Contents: []*Content{
			{
				Bom:         this.bom,
				LineOfField: 1,
				LineOfLayer: 2,
				LineOfNote:  3,
				Excel:       testdata.ExcelNameReal,
				Sheet:       testdata.SheetName,
			},
		},
	}
	return target
}

func (this *SuiteJsonCs) TestOutputJsonCsCode() {
	target := this.target()
	assert.Nil(this.T(), Initialize(target.Contents[0]))
	assert.Nil(this.T(), OutputJsonSchema(target.Contents[0]))
	assert.Nil(this.T(), OutputJsonCsCode(target))
	testdata.CompareFile(this.T(), target.FileJsonCsCode(), this.code)
	target.Contents[0].Close()
}

func (this *SuiteJsonCs) TestOutputJsonCsReader() {
	target := this.target()
	assert.Nil(this.T(), Initialize(target.Contents[0]))
	assert.Nil(this.T(), OutputJsonSchema(target.Contents[0]))
	assert.Nil(this.T(), OutputJsonCsReader(target, this.bom))
	testdata.CompareFile(this.T(), target.FileJsonCsReader(), this.reader)
	target.Contents[0].Close()
}
