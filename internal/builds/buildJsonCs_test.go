package builds

import (
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/testdata"
)

func TestBuildJsonCs(t *testing.T) {
	suite.Run(t, new(SuiteBuildJsonCs))
}

type SuiteBuildJsonCs struct {
	suite.Suite
	workDir string
	code    []byte
	reader  []byte
}

func (this *SuiteBuildJsonCs) SetupSuite() {
	this.workDir = testdata.ChangeWorkDir()
	this.code = []byte(`
`) // TODO: 代碼內容等測試時來看看
	this.reader = []byte(`// generated by sheeter, DO NOT EDIT.

namespace sheeter {
    using System;
    using System.Collections.Generic;

    using Newtonsoft.Json;

    public partial class RealDataReader {
		public static readonly string JsonFileName = "realData.json";

        public static Dictionary<string, RealData> FromJson(string data) {
            return JsonConvert.DeserializeObject<Dictionary<string, RealData>>(data);
        }
    }
}
`)
}

func (this *SuiteBuildJsonCs) TearDownSuite() {
	_ = os.RemoveAll(pathSchema)
	_ = os.RemoveAll(pathJsonCs)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteBuildJsonCs) content() *Content {
	content := &Content{
		Path:        testdata.RootPath,
		LineOfField: 1,
		LineOfLayer: 2,
		LineOfNote:  3,
		Excel:       testdata.ExcelNameReal,
		Sheet:       testdata.SheetName,
	}
	return content
}

func (this *SuiteBuildJsonCs) TestWriteJsonCs() {
	content := this.content()
	content.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(content))
	assert.Nil(this.T(), writeSchema(content))
	assert.Nil(this.T(), writeJsonCs(content))
	testdata.CompareFile(this.T(), content.JsonCsFilePath(), this.code)
	content.close()

	content = this.content()
	content.Excel = testdata.UnknownStr
	content.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(content))
	assert.Nil(this.T(), writeSchema(content))
	assert.NotNil(this.T(), writeJsonCs(content))
	content.close()

	content = this.content()
	content.Sheet = testdata.UnknownStr
	content.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(content))
	assert.Nil(this.T(), writeSchema(content))
	assert.NotNil(this.T(), writeJsonCs(content))
	content.close()
}

func (this *SuiteBuildJsonCs) TestWriteJsonCsReader() {
	content := this.content()
	content.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(content))
	assert.Nil(this.T(), writeSchema(content))
	assert.Nil(this.T(), writeJsonCsReader(content))
	testdata.CompareFile(this.T(), content.JsonCsReaderFilePath(), this.reader)
	content.close()

	content = this.content()
	content.Excel = testdata.UnknownStr
	content.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(content))
	assert.Nil(this.T(), writeSchema(content))
	assert.NotNil(this.T(), writeJsonCsReader(content))
	content.close()

	content = this.content()
	content.Sheet = testdata.UnknownStr
	content.excel = testdata.GetTestExcel(testdata.ExcelNameReal)
	assert.Nil(this.T(), buildLayout(content))
	assert.Nil(this.T(), writeSchema(content))
	assert.NotNil(this.T(), writeJsonCsReader(content))
	content.close()
}
