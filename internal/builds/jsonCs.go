package builds

import (
	"fmt"
	"os"

	"github.com/yinweli/Sheeter/internal/util"
)

// OutputJsonCsCode 輸出json-cs程式碼
func OutputJsonCsCode(contents *Contents) error {
	if err := os.MkdirAll(contents.PathJsonCs(), os.ModePerm); err != nil {
		return fmt.Errorf("output json-cs code failed: %w", err)
	} // if

	options := []string{
		"--src", contents.PathJsonSchema(),
		"--src-lang", "json",
		"--out", contents.FileJsonCsCode(),
		"--lang", "cs",
		"--namespace", contents.Namespace(),
		"--array-type", "array",
		"--features", "attributes-only",
	}

	if err := util.ShellRun("quicktype", options...); err != nil {
		return fmt.Errorf("output json-cs code failed, quicktype error: %w", err)
	} // if

	return nil
}

// OutputJsonCsReader 輸出json-cs讀取器
func OutputJsonCsReader(contents *Contents, bom bool) error {
	const code = `// generated by {{$.AppName}}, DO NOT EDIT.

using System;
using System.IO;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace {{$.Namespace}} {
{{$.SetLine}}{{range $.Contents}}    public partial class {{.StructName}}Reader {
        public static readonly string Json = "{{.FileJson}}";

        public static Dictionary<string, {{.StructName}}> FromJsonFile(string path) {
            return FromJson(File.ReadAllText(path));
        }

        public static Dictionary<string, {{.StructName}}> FromJsonString(string data) {
            return JsonConvert.DeserializeObject<Dictionary<string, {{.StructName}}>>(data);
        }
    }
{{$.NewLine}}{{end}}
}
`

	if err := util.WriteTmpl(contents.FileJsonCsReader(), code, contents, bom); err != nil {
		return fmt.Errorf("output json-cs reader failed: %w", err)
	} // if

	return nil
}
