package builds

import (
	"fmt"
	"os"
	"path"
	"time"

	"github.com/vbauerster/mpb/v7"
	"github.com/vbauerster/mpb/v7/decor"
	"github.com/xuri/excelize/v2"
	"github.com/yinweli/Sheeter/internal/builds/fields"
	"github.com/yinweli/Sheeter/internal/builds/layers"
	"github.com/yinweli/Sheeter/internal/builds/layouts"
	"github.com/yinweli/Sheeter/internal/util"
)

const maxTask = 8                      // 最大工作數量
const drawTime = 10 * time.Millisecond // 進度條繪製時間

// json-c#讀取器模板代碼
const jsonCsReaderCode = `// generated by {{$.Namespace}}, DO NOT EDIT.

namespace {{$.Namespace}} {
    using System;
    using System.Collections.Generic;

    using Newtonsoft.Json;

    public partial class {{$.ReaderName}} {
		public static readonly string JsonFileName = "{{$.JsonFileName}}";

        public static Dictionary<string, {{$.StructName}}> FromJson(string data) {
            return JsonConvert.DeserializeObject<Dictionary<string, {{$.StructName}}>>(data);
        }
    }
}
`

// json-go讀取器模板代碼
const jsonGoReaderCode = `// generated by {{$.Namespace}}, DO NOT EDIT.

package {{$.Namespace}}

import "encoding/json"

type {{$.ReaderName}} map[string]{{$.StructName}}

func (this *{{$.ReaderName}}) JsonFileName() string {
	return "{{$.JsonFileName}}"
}

func (this *{{$.ReaderName}}) FromJson(data []byte) error {
    return json.Unmarshal(data, this)
}
`

// Build 進行表格轉換
func Build(content *Content) error {
	bar := content.Progress.AddBar(
		maxTask,
		mpb.PrependDecorators(
			decor.Name(fmt.Sprintf("%-20s", content.TargetName())),
			decor.Percentage(decor.WCSyncSpace),
		),
		mpb.AppendDecorators(
			decor.OnComplete(decor.Spinner(nil), "complete"),
		),
	)
	defer content.close()

	if err := readExcel(content); err != nil {
		return err
	} // if

	bar.Increment()

	if err := buildLayout(content); err != nil {
		return err
	} // if

	bar.Increment()

	if err := writeSchema(content); err != nil {
		return err
	} // if

	bar.Increment()

	if err := writeJson(content); err != nil {
		return err
	} // if

	bar.Increment()

	if err := writeJsonCs(content); err != nil {
		return err
	} // if

	bar.Increment()

	if err := writeJsonCsReader(content); err != nil {
		return err
	} // if

	bar.Increment()

	if err := writeJsonGo(content); err != nil {
		return err
	} // if

	bar.Increment()

	if err := writeJsonGoReader(content); err != nil {
		return err
	} // if

	bar.Increment()

	if bar != nil { // 讓進度條顯示完成並且有時間畫圖
		bar.SetTotal(maxTask, true)
		time.Sleep(drawTime)
	} // if

	return nil
}

// readExcel 讀取excel檔案
func readExcel(content *Content) error {
	excel, err := excelize.OpenFile(content.ExcelFilePath())

	if err != nil {
		return fmt.Errorf("%s: read excel failed", content.TargetName())
	} // if

	if excel.GetSheetIndex(content.Sheet) == -1 {
		return fmt.Errorf("%s: read excel failed, sheet not found", content.TargetName())
	} // if

	content.excel = excel
	return nil
}

// buildLayout 建立布局資料
func buildLayout(content *Content) error {
	fieldLine, err := content.getColumns(content.LineOfField)

	if err != nil {
		return fmt.Errorf("%s: build layout failed, field line not found", content.TargetName())
	} // if

	layerLine, err := content.getColumns(content.LineOfLayer)

	if err != nil {
		return fmt.Errorf("%s: build layout failed, layer line not found", content.TargetName())
	} // if

	noteLine, err := content.getColumns(content.LineOfNote)

	if err != nil {
		return fmt.Errorf("%s: build layout failed, note line not found", content.TargetName())
	} // if

	builder := layouts.NewBuilder()

	for col, itor := range fieldLine {
		if itor == "" { // 一旦遇到空欄位, 就結束建立欄位列表
			break
		} // if

		name, field, err := fields.Parser(itor)

		if err != nil {
			return fmt.Errorf("%s: build layout failed: %w", content.TargetName(), err)
		} // if

		layer, back, err := layers.Parser(util.GetItem(layerLine, col))

		if err != nil {
			return fmt.Errorf("%s: build layout failed: %w", content.TargetName(), err)
		} // if

		note := util.GetItem(noteLine, col)

		if err := builder.Add(name, note, field, layer, back); err != nil {
			return fmt.Errorf("%s: build layout failed: %w", content.TargetName(), err)
		} // if
	} // for

	pkeyCount := builder.PkeyCount()

	if pkeyCount > 1 {
		return fmt.Errorf("%s: build layout failed, pkey duplicate", content.TargetName())
	} // if

	if pkeyCount <= 0 {
		return fmt.Errorf("%s: build layout failed, pkey not found", content.TargetName())
	} // if

	content.builder = builder
	return nil
}

// writeSchema 輸出json架構
func writeSchema(content *Content) error {
	objs := map[string]interface{}{}
	packs, pkey, err := content.builder.Pack([]string{}, true)

	if err != nil {
		return fmt.Errorf("%s: write json schema failed: %w", content.TargetName(), err)
	} // if

	objs[pkey] = packs

	if err = util.JsonWrite(content.JsonFilePath(), objs, content.Bom); err != nil {
		return fmt.Errorf("%s: write json schema failed: %w", content.TargetName(), err)
	} // if

	return nil
}

// writeJson 輸出json
func writeJson(content *Content) error {
	rows, err := content.getRows(content.LineOfData)

	if err != nil {
		return fmt.Errorf("%s: write json failed, data line not found", content.TargetName())
	} // if

	defer func() { _ = rows.Close() }()
	objs := map[string]interface{}{}

	for ok := true; ok; ok = rows.Next() {
		datas, _ := rows.Columns()

		if datas == nil {
			break // 碰到空行就結束了
		} // if

		packs, pkey, err := content.builder.Pack(datas, false)

		if err != nil {
			return fmt.Errorf("%s: write json failed: %w", content.TargetName(), err)
		} // if

		objs[pkey] = packs
	} // for

	if err = util.JsonWrite(content.JsonFilePath(), objs, content.Bom); err != nil {
		return fmt.Errorf("%s: write json failed: %w", content.TargetName(), err)
	} // if

	return nil
}

// writeJsonCs 輸出json-c#代碼
func writeJsonCs(content *Content) error {
	err := os.MkdirAll(path.Dir(content.JsonCsFilePath()), os.ModePerm)

	if err != nil {
		return fmt.Errorf("%s: write json cs failed: %w", content.TargetName(), err)
	} // if

	options := []string{
		"--src", content.SchemaFilePath(),
		"--src-lang", "json",
		"--out", content.JsonCsFilePath(),
		"--lang", "cs",
		"--top-level", content.StructName(),
		"--namespace", content.Namespace(),
		"--array-type", "array",
		"--features", "attributes-only",
	}

	if err = util.ShellRun("quicktype", options...); err != nil {
		return fmt.Errorf("%s: write json cs failed: %w", content.TargetName(), err)
	} // if

	return nil
}

// writeJsonCsReader 輸出json-c#讀取器, 由於quicktype對於結構命名有不一致的問題, 所以採取資料結構由quicktype執行, 而資料列表由模板執行的方式
func writeJsonCsReader(content *Content) error {
	if err := util.TmplWrite(content.JsonCsReaderFilePath(), jsonCsReaderCode, content, content.Bom); err != nil {
		return fmt.Errorf("%s: write json cs reader failed: %w", content.TargetName(), err)
	} // if

	return nil
}

// writeJsonGo 輸出json-go代碼
func writeJsonGo(content *Content) error {
	err := os.MkdirAll(path.Dir(content.JsonGoFilePath()), os.ModePerm)

	if err != nil {
		return fmt.Errorf("%s: write json go failed: %w", content.TargetName(), err)
	} // if

	options := []string{
		"--src", content.SchemaFilePath(),
		"--src-lang", "json",
		"--out", content.JsonGoFilePath(),
		"--lang", "go",
		"--top-level", content.StructName(),
		"--package", content.Namespace(),
		"--just-types-and-package",
	}

	if err = util.ShellRun("quicktype", options...); err != nil {
		return fmt.Errorf("%s: write json go failed: %w", content.TargetName(), err)
	} // if

	return nil
}

// writeJsonGoReader 輸出json-go讀取器, 由於quicktype對於結構命名有不一致的問題, 所以採取資料結構由quicktype執行, 而資料列表由模板執行的方式
func writeJsonGoReader(content *Content) error {
	if err := util.TmplWrite(content.JsonGoReaderFilePath(), jsonGoReaderCode, content, content.Bom); err != nil {
		return fmt.Errorf("%s: write json go reader failed: %w", content.TargetName(), err)
	} // if

	return nil
}
