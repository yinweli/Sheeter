package builds

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/testdata"
)

func TestJsonGo(t *testing.T) {
	suite.Run(t, new(SuiteJsonGo))
}

type SuiteJsonGo struct {
	suite.Suite
	workDir string
	bom     bool
	code    []byte
	reader  []byte
}

func (this *SuiteJsonGo) SetupSuite() {
	code := `package sheeter

type RealData struct {
	S     S     ` + "`json:\"S\"`" + `
	Name0 int64 ` + "`json:\"name0\"`" + `
}

type S struct {
	A     []A  ` + "`json:\"A\"`" + `
	Name1 bool ` + "`json:\"name1\"`" + `
}

type A struct {
	Name2 int64  ` + "`json:\"name2\"`" + `
	Name3 string ` + "`json:\"name3\"`" + `
}
`
	reader := fmt.Sprintf(`// generated by sheeter, DO NOT EDIT.

package sheeter

import (
	"encoding/json"
	"os"
)

type RealDataReader map[string]RealData

func (this *RealDataReader) Json() string {
	return "%s"
}

func (this *RealDataReader) FromJsonFile(path string) error {
	if bytes, err := os.ReadFile(path); err == nil {
		return this.FromJsonBytes(bytes)
	} else {
		return err
	}
}

func (this *RealDataReader) FromJsonBytes(bytes []byte) error {
	return json.Unmarshal(bytes, this)
}
`, filepath.Join("json", "realData.json"))

	this.workDir = testdata.ChangeWorkDir()
	this.bom = false
	this.code = []byte(code)
	this.reader = []byte(reader)
}

func (this *SuiteJsonGo) TearDownSuite() {
	_ = os.RemoveAll(pathJsonSchema)
	_ = os.RemoveAll(pathJsonGo)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteJsonGo) target() *Contents {
	target := &Contents{
		Contents: []*Content{
			{
				Bom:         this.bom,
				LineOfField: 1,
				LineOfLayer: 2,
				LineOfNote:  3,
				Excel:       testdata.ExcelNameReal,
				Sheet:       testdata.SheetName,
			},
		},
	}
	return target
}

func (this *SuiteJsonGo) TestOutputJsonGoCode() {
	target := this.target()
	assert.Nil(this.T(), Initialize(target.Contents[0]))
	assert.Nil(this.T(), OutputJsonSchema(target.Contents[0]))
	assert.Nil(this.T(), OutputJsonGoCode(target))
	testdata.CompareFile(this.T(), target.FileJsonGoCode(), this.code)
	target.Contents[0].Close()
}

func (this *SuiteJsonGo) TestOutputJsonGoReader() {
	target := this.target()
	assert.Nil(this.T(), Initialize(target.Contents[0]))
	assert.Nil(this.T(), OutputJsonSchema(target.Contents[0]))
	assert.Nil(this.T(), OutputJsonGoReader(target, this.bom))
	testdata.CompareFile(this.T(), target.FileJsonGoReader(), this.reader)
	target.Contents[0].Close()
}
