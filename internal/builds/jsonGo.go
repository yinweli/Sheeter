package builds

import (
	"fmt"
	"os"

	"github.com/yinweli/Sheeter/internal/util"
)

// OutputJsonGoCode 輸出json-go程式碼
func OutputJsonGoCode(contents *Contents) error {
	if err := os.MkdirAll(contents.PathJsonGo(), os.ModePerm); err != nil {
		return fmt.Errorf("output json-go code failed: %w", err)
	} // if

	options := []string{
		"--src", contents.PathJsonSchema(),
		"--src-lang", "json",
		"--out", contents.FileJsonGoCode(),
		"--lang", "go",
		"--package", contents.Namespace(),
		"--just-types-and-package",
	}

	if err := util.ShellRun("quicktype", options...); err != nil {
		return fmt.Errorf("output json-go code failed, quicktype error: %w", err)
	} // if

	if err := util.ShellRun("gofmt", "-w", contents.FileJsonGoCode()); err != nil {
		return fmt.Errorf("output json-go code failed, go fmt error: %w", err)
	} // if

	return nil
}

// OutputJsonGoReader 輸出json-go讀取器
func OutputJsonGoReader(contents *Contents, bom bool) error {
	const code = `// generated by {{$.AppName}}, DO NOT EDIT.

package {{$.Namespace}}

import (
	"encoding/json"
	"os"
)

{{$.SetLine}}{{range $.Contents}}type {{.StructName}}Reader map[string]{{.StructName}}

func (this *{{.StructName}}Reader) Json() string {
	return "{{.FileJson}}"
}

func (this *{{.StructName}}Reader) FromJsonFile(path string) error {
	if bytes, err := os.ReadFile(path); err == nil {
		return this.FromJsonBytes(bytes)
	} else {
		return err
	}
}

func (this *{{.StructName}}Reader) FromJsonBytes(bytes []byte) error {
	return json.Unmarshal(bytes, this)
}
{{$.NewLine}}{{end}}
`

	if err := util.WriteTmpl(contents.FileJsonGoReader(), code, contents, bom); err != nil {
		return fmt.Errorf("output json-go reader failed: %w", err)
	} // if

	if err := util.ShellRun("gofmt", "-w", contents.FileJsonGoReader()); err != nil {
		return fmt.Errorf("output json-go reader failed, gofmt error: %w", err)
	} // if

	return nil
}
