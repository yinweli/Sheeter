package builds

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/yinweli/Sheeter/internal"
	"github.com/yinweli/Sheeter/internal/util"
)

// 模板標題
const header = `// generated by {{$.AppName}}, DO NOT EDIT.
`

// json-cs讀取器模板預設值
const jsonCsReader = header + `
using System;
using System.IO;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace {{$.Namespace}} {
    public partial class {{.ReaderName}} {
        public static readonly string Json = "{{.FileJson}}";

        public static Dictionary<long, {{.StructName}}> FromJsonFile(string path) {
            return FromJson(File.ReadAllText(path));
        }

        public static Dictionary<long, {{.StructName}}> FromJsonString(string data) {
            var datas = new Dictionary<long, {{.StructName}}>;

            foreach(var itor in JsonConvert.DeserializeObject<Dictionary<string, {{.StructName}}>>(data)) {
                datas[Convert.ToInt64(itor.Key)] = itor.Value;
            } // for

            return datas;
        }
    }
}
`

// json-go讀取器模板預設值
const jsonGoReader = header + `
package {{$.Namespace}}

import (
	"encoding/json"
	"os"
	"strconv"
)

type {{.ReaderName}} map[int64]{{.StructName}}

var Json = "{{.FileJson}}"

func FromJsonFile(path string) (reader {{.ReaderName}}, err error) {
	data, err := os.ReadFile(path)

	if err != nil {
		return nil, err
	}

	return FromJsonBytes(data)
}

func FromJsonBytes(data []byte) (reader {{.ReaderName}}, err error) {
	temps := map[string]{{.StructName}}{}

	if err := json.Unmarshal(data, &temps); err != nil {
		return nil, err
	}

	datas := {{.ReaderName}}{}

	for key, value := range temps {
		k, err := strconv.ParseInt(key, 10, 64)

		if err != nil {
			return nil, err
		}

		datas[k] = value
	}

	return datas, nil
}
`

// Code 模板資料
type Code struct {
	JsonCsReader string // json-cs讀取器模板
	JsonGoReader string // json-go讀取器模板
}

// Initialize 初始化模板
func (this *Code) Initialize() (err error) {
	if this.JsonCsReader, err = this.load(internal.FileCodeJsonCsReader, jsonCsReader); err != nil {
		return fmt.Errorf("%s: code load failed: %w", internal.FileCodeJsonCsReader, err)
	} // if

	if err = util.WriteFile(filepath.Join(internal.PathCode, internal.FileCodeJsonCsReader), []byte(this.JsonCsReader), false); err != nil {
		return fmt.Errorf("%s: code save failed: %w", internal.FileCodeJsonCsReader, err)
	} // if

	if this.JsonGoReader, err = this.load(internal.FileCodeJsonGoReader, jsonGoReader); err != nil {
		return fmt.Errorf("%s: code load failed: %w", internal.FileCodeJsonGoReader, err)
	} // if

	if err = util.WriteFile(filepath.Join(internal.PathCode, internal.FileCodeJsonGoReader), []byte(this.JsonGoReader), false); err != nil {
		return fmt.Errorf("%s: code save failed: %w", internal.FileCodeJsonGoReader, err)
	} // if

	return nil
}

// load 讀取模板
func (this *Code) load(name, preset string) (tmpl string, err error) {
	path := filepath.Join(internal.PathCode, name)

	if util.ExistFile(path) {
		if datas, err := os.ReadFile(path); err == nil {
			return string(datas), nil
		} else {
			return "", fmt.Errorf("%w", err)
		} // if
	} // if

	return preset, nil
}
