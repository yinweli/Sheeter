package builds

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/internal/nameds"
	"github.com/yinweli/Sheeter/testdata"
)

func TestPoststepJsonDepot(t *testing.T) {
	suite.Run(t, new(SuitePoststepJsonDepot))
}

type SuitePoststepJsonDepot struct {
	suite.Suite
	testdata.TestEnv
}

func (this *SuitePoststepJsonDepot) SetupSuite() {
	this.Change("test-poststepJsonDepot")
}

func (this *SuitePoststepJsonDepot) TearDownSuite() {
	this.Restore()
}

func (this *SuitePoststepJsonDepot) target() *poststepJsonDepot {
	const excelName = "test"
	const sheetName = "data"

	target := &poststepJsonDepot{
		Global: &Global{},
		Named:  &nameds.Named{ExcelName: excelName, SheetName: sheetName},
		Json:   &nameds.Json{ExcelName: excelName, SheetName: sheetName},
		Struct: []poststepJsonStruct{
			{
				Named:  &nameds.Named{ExcelName: excelName, SheetName: sheetName},
				Reader: true,
			},
		},
	}
	return target
}

func (this *SuitePoststepJsonDepot) TestPoststepJsonDepotCs() {
	data := []byte(`// Code generated by sheeter. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

using System.Collections.Generic;

namespace SheeterJson {
    public partial class Depot {
        public Loader Loader { get; set; }
        public readonly TestDataReader TestData = new TestDataReader();
        private readonly List<Reader> Readers = new List<Reader>();

        public Depot() {
            Readers.Add(TestData);
        }

        public bool FromData() {
            if (Loader == null)
                return false;

            var result = true;

            foreach (var itor in Readers) {
                var data = Loader.Load(itor.DataName(), itor.DataExt(), itor.DataFile());

                if (data == null || data.Length == 0)
                    continue;

                var message = itor.FromData(data);

                if (message.Length != 0) {
                    result = false;
                    Loader.Error(itor.DataName(), message);
                }
            }

            return result;
        }

        public bool MergeData() {
            if (Loader == null)
                return false;

            var result = true;

            foreach (var itor in Readers) {
                var data = Loader.Load(itor.DataName(), itor.DataExt(), itor.DataFile());

                if (data == null || data.Length == 0)
                    continue;

                var message = itor.MergeData(data);

                if (message.Length != 0) {
                    result = false;
                    Loader.Error(itor.DataName(), message);
                }
            }

            return result;
        }

        public void Clear() {
            foreach (var itor in Readers) {
                itor.Clear();
            }
        }
    }

    public interface Loader {
        public void Error(string name, string message);
        public string Load(string name, string ext, string fullname);
    }

    public interface Reader {
        public string DataName();
        public string DataExt();
        public string DataFile();
        public string FromData(string data);
        public string MergeData(string data);
        public void Clear();
    }
}
`)

	target := this.target()
	assert.Nil(this.T(), PoststepJsonDepotCs(target, nil))
	testdata.CompareFile(this.T(), target.JsonDepotCsPath(), data)

	assert.Nil(this.T(), PoststepJsonDepotCs(nil, nil))
}

func (this *SuitePoststepJsonDepot) TestPoststepJsonDepotGo() {
	data := []byte(`// Code generated by sheeter. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

package sheeterJson

func NewDepot(loader Loader) *Depot {
	depot := &Depot{}
	depot.loader = loader
	depot.readers = append(
		depot.readers,
		&depot.TestData,
	)
	return depot
}

type Depot struct {
	TestData TestDataReader
	loader Loader
	readers []Reader
}

func (this *Depot) FromData() bool {
	if this.loader == nil {
		return false
	}

	result := true

	for _, itor := range this.readers {
		data := this.loader.Load(itor.DataName(), itor.DataExt(), itor.DataFile())

		if data == nil || len(data) == 0 {
			continue
		}

		if err := itor.FromData(data); err != nil {
			result = false
			this.loader.Error(itor.DataName(), err)
		}
	}

	return result
}

func (this *Depot) MergeData() bool {
	if this.loader == nil {
		return false
	}

	result := true

	for _, itor := range this.readers {
		data := this.loader.Load(itor.DataName(), itor.DataExt(), itor.DataFile())

		if data == nil || len(data) == 0 {
			continue
		}

		if err := itor.MergeData(data); err != nil {
			result = false
			this.loader.Error(itor.DataName(), err)
		}
	}

	return result
}

func (this *Depot) Clear() {
	for _, itor := range this.readers {
		itor.Clear()
	}
}

type Loader interface {
	Error(name string, err error)
	Load(name, ext, fullname string) []byte
}

type Reader interface {
	DataName() string
	DataExt() string
	DataFile() string
	FromData(data []byte) error
	MergeData(data []byte) error
	Clear()
}
`)

	target := this.target()
	assert.Nil(this.T(), PoststepJsonDepotGo(target, nil))
	testdata.CompareFile(this.T(), target.JsonDepotGoPath(), data)

	assert.Nil(this.T(), PoststepJsonDepotGo(nil, nil))
}
