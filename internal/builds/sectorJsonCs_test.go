package builds

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/internal"
	"github.com/yinweli/Sheeter/testdata"
)

func TestSectorJsonCs(t *testing.T) {
	suite.Run(t, new(SuiteSectorJsonCs))
}

type SuiteSectorJsonCs struct {
	suite.Suite
	workDir string
	code    []byte
	reader  []byte
}

func (this *SuiteSectorJsonCs) SetupSuite() {
	this.workDir = testdata.ChangeWorkDir()
	this.code = []byte(`namespace realdata
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Struct
    {
        [JsonProperty("S")]
        public S S { get; set; }

        [JsonProperty("name0")]
        public long Name0 { get; set; }
    }

    public partial class S
    {
        [JsonProperty("A")]
        public A[] A { get; set; }

        [JsonProperty("name1")]
        public bool Name1 { get; set; }
    }

    public partial class A
    {
        [JsonProperty("name2")]
        public long Name2 { get; set; }

        [JsonProperty("name3")]
        public string Name3 { get; set; }
    }
}
`)
	this.reader = []byte(fmt.Sprintf(`// generated by sheeter, DO NOT EDIT.

using System;
using System.IO;
using System.Collections.Generic;
using Newtonsoft.Json;

namespace realdata {
    public partial class Reader {
        public static readonly string Json = "%s";

        public static Dictionary<long, Struct> FromJsonFile(string path) {
            return FromJson(File.ReadAllText(path));
        }

        public static Dictionary<long, Struct> FromJsonString(string data) {
            var datas = new Dictionary<long, Struct>;

            foreach(var itor in JsonConvert.DeserializeObject<Dictionary<string, Struct>>(data)) {
                datas[Convert.ToInt64(itor.Key)] = itor.Value;
            } // for

            return datas;
        }
    }
}
`, filepath.Join("json", "realData.json")))
}

func (this *SuiteSectorJsonCs) TearDownSuite() {
	_ = os.RemoveAll(internal.PathCode)
	_ = os.RemoveAll(internal.PathJsonSchema)
	_ = os.RemoveAll(internal.PathJsonCs)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteSectorJsonCs) target() *Sector {
	target := &Sector{
		Global: Global{
			LineOfField: 1,
			LineOfLayer: 2,
			LineOfNote:  3,
		},
		Element: Element{
			Excel: testdata.ExcelNameReal,
			Sheet: testdata.SheetName,
		},
		Code: &Code{},
	}
	_ = target.Code.Initialize()
	return target
}

func (this *SuiteSectorJsonCs) TestSectorJsonCsCode() {
	target := this.target()
	assert.Nil(this.T(), SectorInit(target))
	assert.Nil(this.T(), SectorJsonSchema(target))
	assert.Nil(this.T(), SectorJsonCsCode(target))
	testdata.CompareFile(this.T(), target.FileJsonCsCode(), this.code)
	target.Close()
}

func (this *SuiteSectorJsonCs) TestSectorJsonCsReader() {
	target := this.target()
	assert.Nil(this.T(), SectorInit(target))
	assert.Nil(this.T(), SectorJsonSchema(target))
	assert.Nil(this.T(), SectorJsonCsReader(target))
	testdata.CompareFile(this.T(), target.FileJsonCsReader(), this.reader)
	target.Close()
}
