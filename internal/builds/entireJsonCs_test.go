package builds

import (
	"fmt"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"

	"github.com/yinweli/Sheeter/internal"
	"github.com/yinweli/Sheeter/internal/fields"
	"github.com/yinweli/Sheeter/internal/layouts"
	"github.com/yinweli/Sheeter/internal/names"
	"github.com/yinweli/Sheeter/testdata"
)

func TestEntireJsonCs(t *testing.T) {
	suite.Run(t, new(SuiteEntireJsonCs))
}

type SuiteEntireJsonCs struct {
	suite.Suite
	workDir    string
	entire     *Entire
	codeStruct []byte
	codeReader []byte
}

func (this *SuiteEntireJsonCs) SetupSuite() {
	this.workDir = testdata.ChangeWorkDir()
	this.entire = &Entire{
		Type: &layouts.Type{
			Reader: true,
			Named: &names.Named{
				Excel: "test",
				Sheet: "data",
			},
			Field: []*layouts.Field{
				{Name: "name1", Note: "note1", Field: &fields.Pkey{}, Alter: "", Array: false},
				{Name: "name2", Note: "note2", Field: &fields.Int{}, Alter: "", Array: false},
				{Name: "name3", Note: "note3", Field: &fields.IntArray{}, Alter: "", Array: false},
				{Name: "name4", Note: "note4", Field: nil, Alter: "Data", Array: false},
				{Name: "name5", Note: "note5", Field: nil, Alter: "Data", Array: true},
			},
		},
	}
	this.codeStruct = []byte(`// generated by sheeter, DO NOT EDIT.

using Newtonsoft.Json;

namespace sheeter {
    public partial class TestData {
        // note1
        [JsonProperty("Name1")]
        public long Name1 { get; set; }
        // note2
        [JsonProperty("Name2")]
        public long Name2 { get; set; }
        // note3
        [JsonProperty("Name3")]
        public long[] Name3 { get; set; }
        // note4
        [JsonProperty("Name4")]
        public Data Name4 { get; set; }
        // note5
        [JsonProperty("Name5")]
        public Data[] Name5 { get; set; }
    }
}
`)
	this.codeReader = []byte(fmt.Sprintf(`// generated by sheeter, DO NOT EDIT.

using Newtonsoft.Json;
using System;
using System.IO;
using System.Collections.Generic;

namespace sheeter {
    public partial class TestDataReader {
        public static readonly string Json = "%s";

        public static Dictionary<long, TestData> FromJsonFile(string path) {
            return FromJsonString(File.ReadAllText(path));
        }

        public static Dictionary<long, TestData> FromJsonString(string data) {
            var temps = JsonConvert.DeserializeObject<Dictionary<string, TestData>>(data);

            if (temps == null) {
                return null;
            }

            var datas = new Dictionary<long, TestData>();

            foreach(var itor in temps) {
                datas[Convert.ToInt64(itor.Key)] = itor.Value;
            }

            return datas;
        }
    }
}
`, filepath.ToSlash(filepath.Join(internal.PathJson, "testData.json"))))
}

func (this *SuiteEntireJsonCs) TearDownSuite() {
	_ = os.RemoveAll(internal.PathJsonCs)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteEntireJsonCs) TestEntireJsonCsStruct() {
	assert.Nil(this.T(), EntireJsonCsStruct(this.entire))
	testdata.CompareFile(this.T(), this.entire.Named.FileJsonCsStruct(), this.codeStruct)
}

func (this *SuiteEntireJsonCs) TestEntireJsonCsReader() {
	assert.Nil(this.T(), EntireJsonCsReader(this.entire))
	testdata.CompareFile(this.T(), this.entire.Named.FileJsonCsReader(), this.codeReader)
}
