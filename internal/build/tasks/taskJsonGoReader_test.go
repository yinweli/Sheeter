package tasks

import (
	"os"
	"testing"

	"github.com/yinweli/Sheeter/testdata"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

func TestTaskJsonGoReader(t *testing.T) {
	suite.Run(t, new(SuiteTaskJsonGoReader))
}

type SuiteTaskJsonGoReader struct {
	suite.Suite
	workDir   string
	dataBytes []byte
}

func (this *SuiteTaskJsonGoReader) SetupSuite() {
	this.workDir = testdata.ChangeWorkDir()
	this.dataBytes = []byte(`// generated by sheeter, DO NOT EDIT.

package sheeter

import "encoding/json"

type RealDataReader map[string]RealData

func (this *RealDataReader) JsonFileName() string {
	return "realData.json"
}

func (this *RealDataReader) FromJson(data []byte) error {
    return json.Unmarshal(data, this)
}
`)
}

func (this *SuiteTaskJsonGoReader) TearDownSuite() {
	_ = os.RemoveAll(pathJsonGo)
	testdata.RestoreWorkDir(this.workDir)
}

func (this *SuiteTaskJsonGoReader) target() *Task {
	target := &Task{
		Excel: testdata.RealExcel,
		Sheet: testdata.SheetName,
	}
	return target
}

func (this *SuiteTaskJsonGoReader) TestJsonGoReader() {
	target := this.target()
	assert.Nil(this.T(), target.jsonGoReader())
	testdata.CompareFile(this.T(), target.jsonGoReaderFilePath(), this.dataBytes)
	target.close()

	target = this.target()
	target.Excel = testdata.UnknownStr
	assert.NotNil(this.T(), target.jsonGoReader())
	target.close()

	target = this.target()
	target.Sheet = testdata.UnknownStr
	assert.NotNil(this.T(), target.jsonGoReader())
	target.close()
}
