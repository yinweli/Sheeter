package codes

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"

	"github.com/yinweli/Sheeter/internal"
	"github.com/yinweli/Sheeter/internal/utils"
)

// Initialize 初始化
func Initialize(cmd *cobra.Command) error {
	flags := cmd.Flags()

	if flags.Changed(flagClean) {
		if clean, err := flags.GetBool(flagClean); err == nil && clean {
			_ = os.RemoveAll(internal.PathCode)
		} // if
	} // if

	if err := JsonCsStruct.load(); err != nil {
		return fmt.Errorf("%w", err)
	} // if

	if err := JsonCsStruct.save(); err != nil {
		return fmt.Errorf("%w", err)
	} // if

	if err := JsonCsReader.load(); err != nil {
		return fmt.Errorf("%w", err)
	} // if

	if err := JsonCsReader.save(); err != nil {
		return fmt.Errorf("%w", err)
	} // if

	if err := JsonGoStruct.load(); err != nil {
		return fmt.Errorf("%w", err)
	} // if

	if err := JsonGoStruct.save(); err != nil {
		return fmt.Errorf("%w", err)
	} // if

	if err := JsonGoReader.load(); err != nil {
		return fmt.Errorf("%w", err)
	} // if

	if err := JsonGoReader.save(); err != nil {
		return fmt.Errorf("%w", err)
	} // if

	return nil
}

// Code 程式碼資料
type Code struct {
	Name string // 程式碼檔名
	Code string // 程式碼字串
}

// load 讀取程式碼
func (this *Code) load() error {
	path := this.path()

	if utils.ExistFile(path) == false {
		return nil
	} // if

	code, err := os.ReadFile(path)

	if err != nil {
		return fmt.Errorf("%s: code load failed: %w", this.Name, err)
	} // if

	this.Code = string(code)
	return nil
}

// save 儲存程式碼
func (this *Code) save() error {
	if err := utils.WriteFile(this.path(), []byte(this.Code)); err != nil {
		return fmt.Errorf("%s: code save failed: %w", this.Name, err)
	} // if

	return nil
}

// path 取得程式碼路徑
func (this *Code) path() string {
	return filepath.Join(internal.PathCode, this.Name)
}

// JsonCsStruct json-cs結構程式碼
var JsonCsStruct = Code{
	Name: internal.FileCodeJsonCsStruct,
	Code: `// generated by {{$.Named.AppName}}, DO NOT EDIT.

using Newtonsoft.Json;

namespace {{$.Named.Namespace}} {
    public partial class {{$.Named.StructName}} {
{{- range $.Field}}
        // {{$.FieldNote .}}
        [JsonProperty("{{$.FieldName .}}")]
        public {{$.FieldTypeCs .}} {{$.FieldName .}} { get; set; }
{{- end}}
    }
}
`,
}

// JsonCsReader json-cs讀取器程式碼
var JsonCsReader = Code{
	Name: internal.FileCodeJsonCsReader,
	Code: `// generated by {{$.Named.AppName}}, DO NOT EDIT.

using Newtonsoft.Json;
using System;
using System.IO;
using System.Collections.Generic;

namespace {{$.Named.Namespace}} {
    public partial class {{$.Named.ReaderName}} {
        public static readonly string Json = "{{$.Named.FileJsonCode}}";

        public static Dictionary<long, {{$.Named.StructName}}> FromJsonFile(string path) {
            return FromJsonString(File.ReadAllText(path));
        }

        public static Dictionary<long, {{$.Named.StructName}}> FromJsonString(string data) {
            var temps = JsonConvert.DeserializeObject<Dictionary<string, {{$.Named.StructName}}>>(data);

            if (temps == null) {
                return null;
            }

            var datas = new Dictionary<long, {{$.Named.StructName}}>();

            foreach(var itor in temps) {
                datas[Convert.ToInt64(itor.Key)] = itor.Value;
            }

            return datas;
        }
    }
}
`,
}

// JsonGoStruct json-go結構程式碼
var JsonGoStruct = Code{
	Name: internal.FileCodeJsonGoStruct,
	Code: `// generated by {{$.Named.AppName}}, DO NOT EDIT.

package {{$.Named.Namespace}}

type {{$.Named.StructName}} struct {
{{- range $.Field}}
	// {{$.FieldNote .}}
	{{$.FieldName .}} {{$.FieldTypeGo .}} ` + "`json:\"{{$.FieldName .}}\"`" + `
{{- end}}
}
`,
}

// JsonGoReader json-go讀取器程式碼
var JsonGoReader = Code{
	Name: internal.FileCodeJsonGoReader,
	Code: `// generated by sheeter, DO NOT EDIT.

package {{$.Named.Namespace}}

import (
	"encoding/json"
	"fmt"
	"os"
	"strconv"
)

type {{$.Named.ReaderName}} struct {
	Datas map[int64]{{$.Named.StructName}}
}

func (this *{{$.Named.ReaderName}}) Json() string {
	return "{{$.Named.FileJsonCode}}"
}

func (this *{{$.Named.ReaderName}}) FromJsonFile(path string) error {
	data, err := os.ReadFile(path)

	if err != nil {
		return fmt.Errorf("{{$.Named.ReaderName}}: from json file failed: %w", err)
	}

	return this.FromJsonBytes(data)
}

func (this *{{$.Named.ReaderName}}) FromJsonBytes(data []byte) error {
	temps := map[string]{{$.Named.StructName}}{}

	if err := json.Unmarshal(data, &temps); err != nil {
		return err
	}

	datas := map[int64]{{$.Named.StructName}}{}

	for key, value := range temps {
		k, err := strconv.ParseInt(key, 10, 64)

		if err != nil {
			return fmt.Errorf("{{$.Named.ReaderName}}: from json bytes failed: %w", err)
		}

		datas[k] = value
	}

	this.Datas = datas
	return nil
}
`,
}
