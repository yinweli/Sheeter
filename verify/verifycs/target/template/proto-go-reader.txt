// Code generated by {{$.AppName}}. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

package {{$.ProtoNamespace $.SimpleNamespace}}

import (
	"fmt"

	"google.golang.org/protobuf/proto"
)

type {{$.ReaderName}} struct {
	*{{$.StorerName}}
}

func (this *{{$.ReaderName}}) DataName() string {
	return "{{$.ProtoDataName}}"
}

func (this *{{$.ReaderName}}) DataExt() string {
	return "{{$.ProtoDataExt}}"
}

func (this *{{$.ReaderName}}) DataFile() string {
	return "{{$.ProtoDataFile}}"
}

func (this *{{$.ReaderName}}) FromData(data []byte) error {
	this.{{$.StorerName}} = &{{$.StorerName}}{
		Datas: map[{{$.PkeyTypeGo}}]*{{$.StructName}}{},
	}

	if err := proto.Unmarshal(data, this.{{$.StorerName}}); err != nil {
		return fmt.Errorf("{{$.ReaderName}}: from data failed: %w", err)
	}

	return nil
}

func (this *{{$.ReaderName}}) MergeData(data []byte) (repeats []{{$.PkeyTypeGo}}) {
	tmpl := &{{$.StorerName}}{
		{{$.StorerDatas}}: map[{{$.PkeyTypeGo}}]*{{$.StructName}}{},
	}

	if err := proto.Unmarshal(data, tmpl); err != nil {
		return repeats
	}

	if this.{{$.StorerName}} == nil {
		this.{{$.StorerName}} = &{{$.StorerName}}{
			{{$.StorerDatas}}: map[{{$.PkeyTypeGo}}]*{{$.StructName}}{},
		}
	}

	for k, v := range tmpl.{{$.StorerDatas}} {
		if _, ok := this.{{$.StorerName}}.{{$.StorerDatas}}[k]; ok == false {
			this.{{$.StorerName}}.{{$.StorerDatas}}[k] = v
		} else {
			repeats = append(repeats, k)
		}
	}

	return repeats
}
