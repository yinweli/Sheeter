// Code generated by {{$.AppName}}. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

using System.Collections.Generic;
using System.IO;

namespace {{$.NamespaceProto $.SimpleNamespace | $.FirstUpper}} {
    public partial class {{$.ReaderName}} {
        public static string FileName() {
            return "{{$.FileProtoData}}";
        }

        public bool FromPath(string path) {
            return FromData(File.ReadAllBytes(Path.Combine(path, FileName())));
        }

        public bool FromData(byte[] data) {
            Datas = {{$.StorerName}}.Parser.ParseFrom(data);
            return Datas != null;
        }

        public {{$.PkeyTypeCs}}[] MergePath(params string[] path) {
            var repeats = new List<{{$.PkeyTypeCs}}>();

            foreach (var itor in path) {
                try {
                    repeats.AddRange(MergeData(File.ReadAllBytes(Path.Combine(itor, FileName()))));
                } catch {
                    // do nothing
                }
            }

            return repeats.ToArray();
        }

        public {{$.PkeyTypeCs}}[] MergeData(byte[] data) {
            var repeats = new List<{{$.PkeyTypeCs}}>();
            var tmpl = {{$.StorerName}}.Parser.ParseFrom(data);

            if (tmpl == null)
                return repeats.ToArray();

            if (Datas == null)
                Datas = new {{$.StorerName}}();

            foreach (var itor in tmpl.{{$.StorerDatas}}) {
                if (Data.ContainsKey(itor.Key) == false)
                    Data[itor.Key] = itor.Value;
                else
                    repeats.Add(itor.Key);
            }

            return repeats.ToArray();
        }

        public IDictionary<{{$.PkeyTypeCs}}, {{$.StructName}}> Data {
            get {
                return Datas.{{$.StorerDatas}};
            }
        }

        private {{$.StorerName}} Datas = null;
    }
}
