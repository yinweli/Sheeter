// generated by sheeter, DO NOT EDIT.

package {{$.Named.Namespace}}

import (
	"encoding/json"
	"fmt"
	"os"
	"strconv"
)

type {{$.Named.ReaderName}} struct {
	Datas map[int64]{{$.Named.StructName}}
}

func (this *{{$.Named.ReaderName}}) Json() string {
	return "{{$.Named.FileJsonDataCode}}"
}

func (this *{{$.Named.ReaderName}}) FromJsonFile(path string) error {
	data, err := os.ReadFile(path)

	if err != nil {
		return fmt.Errorf("{{$.Named.ReaderName}}: from json file failed: %w", err)
	}

	return this.FromJsonBytes(data)
}

func (this *{{$.Named.ReaderName}}) FromJsonBytes(data []byte) error {
	temps := map[string]{{$.Named.StructName}}{}

	if err := json.Unmarshal(data, &temps); err != nil {
		return err
	}

	datas := map[int64]{{$.Named.StructName}}{}

	for key, value := range temps {
		k, err := strconv.ParseInt(key, 10, 64)

		if err != nil {
			return fmt.Errorf("{{$.Named.ReaderName}}: from json bytes failed: %w", err)
		}

		datas[k] = value
	}

	this.Datas = datas
	return nil
}
