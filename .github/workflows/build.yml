name: build

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    needs: [lint, test]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: [1.20.x]
        include:
          - os: ubuntu-latest
            artifacts-name: "linux-amd64"
            goos: "linux"
            goarch: "amd64"
          - os: macos-latest
            artifacts-name: "darwin-amd64"
            goos: "darwin"
            goarch: "amd64"
          - os: windows-latest
            artifacts-name: "windows-amd64"
            goos: "windows"
            goarch: "amd64"
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup go ${{ matrix.go }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: build
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter/excel
          env GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter -ldflags="-s -w" cmd/sheeter/*.go
          cp README.md ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter
          cp support/example/config.yaml ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter
          cp support/example/build.bat ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter
          cp support/example/excel/example.xlsx ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter/excel
          # Compress the output directory
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a -tzip ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter-${{ matrix.artifacts-name }}.zip ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/*
          else
            tar -czf ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter-${{ matrix.artifacts-name }}.tar.gz -C ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter .
          fi
      - name: release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter-${{ matrix.artifacts-name }}.zip
            else
              ${{ github.workspace }}/release/${{ matrix.artifacts-name }}/sheeter-${{ matrix.artifacts-name }}.tar.gz
            fi
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest]
        go: [1.20.x]
    name: ${{ matrix.os }} | go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup go ${{ matrix.go }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
        go: [1.20.x]
        proto: [3.x]
    name: ${{ matrix.os }} | go ${{ matrix.go }} | proto ${{ matrix.proto }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup go ${{ matrix.go }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: setup protoc
        uses: arduino/setup-protoc@v1
        with:
          version: ${{ matrix.proto }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: setup protoc-go
        run: go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - name: test
        run: go test -coverprofile=coverage.txt -covermode=atomic ./...
      - name: upload coverage to Codecov
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          fail_ci_if_error: true