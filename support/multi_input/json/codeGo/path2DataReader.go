// Code generated by sheeter. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

package sheeterJson

import (
	"encoding/json"
	"fmt"
)

type Path2DataReader struct {
	*Path2DataStorer
}

func (this *Path2DataReader) DataName() string {
	return "path2Data"
}

func (this *Path2DataReader) DataExt() string {
	return ".json"
}

func (this *Path2DataReader) DataFile() string {
	return "path2Data.json"
}

func (this *Path2DataReader) FromData(data []byte) error {
	this.Path2DataStorer = &Path2DataStorer{
		Datas: map[int64]*Path2Data{},
	}

	if err := json.Unmarshal(data, this.Path2DataStorer); err != nil {
		return fmt.Errorf("from data failed: %w", err)
	}

	return nil
}

func (this *Path2DataReader) MergeData(data []byte) error {
	tmpl := &Path2DataStorer{
		Datas: map[int64]*Path2Data{},
	}

	if err := json.Unmarshal(data, tmpl); err != nil {
		return fmt.Errorf("merge data failed: %w", err)
	}

	if this.Path2DataStorer == nil {
		this.Path2DataStorer = &Path2DataStorer{
			Datas: map[int64]*Path2Data{},
		}
	}

	for k, v := range tmpl.Datas {
		if _, ok := this.Path2DataStorer.Datas[k]; ok {
			return fmt.Errorf("merge data failed: key repeat")
		}

		this.Path2DataStorer.Datas[k] = v
	}

	return nil
}

func (this *Path2DataReader) Clear() {
	this.Path2DataStorer = nil
}

func (this *Path2DataReader) Get(key int64) (result *Path2Data, ok bool) {
	result, ok = this.Datas[key]
	return result, ok
}

func (this *Path2DataReader) Keys() (result []int64) {
	for itor := range this.Datas {
		result = append(result, itor)
	}

	return result
}

func (this *Path2DataReader) Values() (result []*Path2Data) {
	for _, itor := range this.Datas {
		result = append(result, itor)
	}

	return result
}

func (this *Path2DataReader) Count() int {
	return len(this.Datas)
}
