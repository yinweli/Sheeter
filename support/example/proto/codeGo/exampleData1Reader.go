// Code generated by sheeter. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

package sheeterProto

import (
	"fmt"

	"google.golang.org/protobuf/proto"
)

type ExampleData1Reader struct {
	*ExampleData1Storer
}

func (this *ExampleData1Reader) FileName() FileName {
	return NewFileName("exampleData1", ".bytes")
}

func (this *ExampleData1Reader) FromData(data []byte) error {
	this.ExampleData1Storer = &ExampleData1Storer{
		Datas: map[int32]*ExampleData1{},
	}

	if err := proto.Unmarshal(data, this.ExampleData1Storer); err != nil {
		return fmt.Errorf("from data failed: %w", err)
	}

	return nil
}

func (this *ExampleData1Reader) MergeData(data []byte) error {
	tmpl := &ExampleData1Storer{
		Datas: map[int32]*ExampleData1{},
	}

	if err := proto.Unmarshal(data, tmpl); err != nil {
		return fmt.Errorf("merge data failed: %w", err)
	}

	if this.ExampleData1Storer == nil {
		this.ExampleData1Storer = &ExampleData1Storer{
			Datas: map[int32]*ExampleData1{},
		}
	}

	for k, v := range tmpl.Datas {
		if _, ok := this.ExampleData1Storer.Datas[k]; ok {
			return fmt.Errorf("merge data failed: key repeat")
		}

		this.ExampleData1Storer.Datas[k] = v
	}

	return nil
}

func (this *ExampleData1Reader) Clear() {
	this.ExampleData1Storer = nil
}

func (this *ExampleData1Reader) Get(key int32) (result *ExampleData1, ok bool) {
	result, ok = this.Datas[key]
	return result, ok
}

func (this *ExampleData1Reader) Keys() (result []int32) {
	for itor := range this.Datas {
		result = append(result, itor)
	}

	return result
}

func (this *ExampleData1Reader) Values() (result []*ExampleData1) {
	for _, itor := range this.Datas {
		result = append(result, itor)
	}

	return result
}

func (this *ExampleData1Reader) Count() int {
	return len(this.Datas)
}
