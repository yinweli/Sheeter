// Code generated by sheeter. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

package sheeter

import (
	"encoding/json"
	"fmt"
)

// VerifyData verify.xlsx#Data
type VerifyData struct {
	Duration string  `json:"Duration"` // duration
	Float    float32 `json:"Float"`    // float
	Name1    int32   `json:"Name1"`    // note1
	Name2    int32   `json:"Name2"`    // note2
	Name3    int32   `json:"Name3"`    // note3
	Name4    int32   `json:"Name4"`    // note4
	Name5    int32   `json:"Name5"`    // note5
	Ratio    string  `json:"Ratio"`    // ratio
	Space    []int32 `json:"Space"`    // space
}

// VerifyDataReader verify.xlsx#Data
type VerifyDataReader struct {
	Data map[int32]*VerifyData // 資料列表
}

// FileName 取得檔名物件
func (this *VerifyDataReader) FileName() FileName {
	return NewFileName("verifyData", ".json")
}

// FromData 讀取資料
func (this *VerifyDataReader) FromData(data []byte, clear bool, progress *Progress) error {
	tmpl := map[int32]*VerifyData{}

	if err := json.Unmarshal(data, &tmpl); err != nil {
		return fmt.Errorf("from data: %w", err)
	} // if

	if clear || this.Data == nil {
		this.Data = map[int32]*VerifyData{}
	} // if

	task := progress.Reg()
	curr := 0
	total := len(tmpl)

	for k, v := range tmpl {
		if _, ok := this.Data[k]; ok {
			return fmt.Errorf("from data: key duplicate [verifyData : %v]", k)
		} // if

		this.Data[k] = v
		curr++
		progress.Set(task, curr, total)
	} // for

	return nil
}

// Clear 清除資料
func (this *VerifyDataReader) Clear() {
	this.Data = map[int32]*VerifyData{}
}

// Get 取得資料
func (this *VerifyDataReader) Get(key int32) *VerifyData {
	if result, ok := this.Data[key]; ok {
		return result
	} // if

	return nil
}

// Keys 取得索引列表
func (this *VerifyDataReader) Keys() (result []int32) {
	for itor := range this.Data {
		result = append(result, itor)
	} // for

	return result
}

// Values 取得資料列表
func (this *VerifyDataReader) Values() (result []*VerifyData) {
	for _, itor := range this.Data {
		result = append(result, itor)
	} // for

	return result
}

// ValuesAny 取得資料列表
func (this *VerifyDataReader) ValuesAny() (result []any) {
	for _, itor := range this.Data {
		result = append(result, itor)
	} // for

	return result
}

// Count 取得資料數量
func (this *VerifyDataReader) Count() int {
	return len(this.Data)
}
