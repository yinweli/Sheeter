// Code generated by sheeter. DO NOT EDIT.
// Sheeter: https://github.com/yinweli/Sheeter

using System.Collections.Generic;

namespace SheeterProto
{
    using Data_ = VerifyData2;
    using Pkey_ = System.Int32;
    using Storer_ = VerifyData2Storer;

    public partial class VerifyData2Reader : Reader
    {
        public FileName FileName()
        {
            return new FileName("verifyData2", ".bytes");
        }

        public string FromData(byte[] data)
        {
            Storer_ result;

            try
            {
                result = Storer_.Parser.ParseFrom(data);
            }
            catch
            {
                return "from data failed: deserialize failed";
            }

            if (result == null)
                return "from data failed: result null";

            storer = result;
            return string.Empty;
        }

        public string MergeData(byte[] data)
        {
            Storer_ result;

            try
            {
                result = Storer_.Parser.ParseFrom(data);
            }
            catch
            {
                return "merge data failed: deserialize failed";
            }

            if (result == null)
                return "merge data failed: result null";

            foreach (var itor in result.Datas)
            {
                if (storer.Datas.ContainsKey(itor.Key))
                    return "merge data failed: key repeat";

                storer.Datas[itor.Key] = itor.Value;
            }

            return string.Empty;
        }

        public void Clear()
        {
            storer.Datas.Clear();
        }

        public bool TryGetValue(Pkey_ key, out Data_ value)
        {
            return storer.Datas.TryGetValue(key, out value);
        }

        public bool ContainsKey(Pkey_ key)
        {
            return storer.Datas.ContainsKey(key);
        }

        public IEnumerator<KeyValuePair<Pkey_, Data_>> GetEnumerator()
        {
            return storer.Datas.GetEnumerator();
        }

        public Data_ this[Pkey_ key]
        {
            get { return storer.Datas[key]; }
        }

        public ICollection<Pkey_> Keys
        {
            get { return storer.Datas.Keys; }
        }

        public ICollection<Data_> Values
        {
            get { return storer.Datas.Values; }
        }

        public int Count
        {
            get { return storer.Datas.Count; }
        }

        private Storer_ storer = new Storer_();
    }
}
